<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> All Path Algorithm </title>
    <link rel="stylesheet" href="css/styleSheet.css">
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link href="https://fonts.googleapis.com/css2?family=Scheherazade+New:wght@400;700&display=swap" rel="stylesheet">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
 <body img src="/images/algorithm.jpg">
 <div class="hold">
	  <div class="page" >

			<h1 > All Path Algorithm </h1 >
			<h2 > Help Page </h2 >
			<nav class="nav" >
				<div class="nav--border" >
					<ul >

						<a href="/home" class="nav--link" >
							<div class="nav--icon-container" >
								<i class="material-icons" > home</i >
							</div >
							<span class="nav__label" > Home Page</span >
						</a >

						<a href="/demo" class="nav--link" >
							<div class="nav--icon-container" >
								<i class="material-icons" > code</i >
							</div >
							<span class="nav__label" > Demo Page</span >
						</a >

						<div class="help" >
						<a href="/help" class="help--link" >
							<div class="help--icon-container" >
								<i class="material-icons" > help_outline</i >
							</div >
							<span class="help__label" > Help</span >
						</a >
						</div >

					</ul>
				</div >
			</nav >
		</div >

		<div class="main" >

       <h3>Abstract</h3>
	   	<p> 
		This algorithm uses vertical data structures to find all length paths (including shortest paths) for pairs of vertices in a graph.
		It then stores them into a multilevel bit vector tree (MBVT). This MBVT allows a faster computation time from one vector to another by the use of indexs. 
		This algorithm also allows the addition or removal of any edge or node without needing to re-generate the tree. The algorithm is more suited to distributed processing.
		</p>

		<h3>How it works</h3>
		
		<p> 
		Step 1:
		Obtain bit vectors from adjacency matrix and label them. <br>
		Step 2: 
		Apply a combination of breadth-first approach and logical operators to further explore existing paths.<br>
		Step 3: 
		The algorithm explores until there are no new paths to be found and then grouped into levels forming a multilevel path tree. <br>
		Step 4:
		The paths explored are then indexed and stored in a list to enable faster lookup. <br>
		Step 5:	
		The shortest-paths can be found by querying the list that was created. <br> <br>

		Here is the psudocode on how it works: <br>
		<pre>
			<code>
	ShortestPath (int Indexes, int VL*, int source, int dest) { 
		For each value in Indexes:
		    Calculate current level from the index 
		    Calculate K from value % VL 

		    IF K equals dest THEN 
		        Calculate H from value / VLcurrentlevel +1

		        IF H equals source THEN 
		            Calculate intermediatePath (int VL, int currentlevel, int index) 
		            Print Shortest Path //i.e. H, intermediatePath and K 
		        ELSE break

		    ELSE break 
		    Read Next value from Indexes 
		END For 
	}
			</code>			
		</pre>
		 <p>*VL is the Vector Length, also known as number of vertices in the graph </p>
		</p>

		<h3>Time Comparison</h3>
		<div class=img>
			<img src = "/images/Time.png">
		</div>

		<p class=tables> Table 1: Big O Notation comparison between the algorithms</p>
		<div class=img>
			<img src = "/images/GraphExample.png">
		</div>
		<p class=tables>Figure 1: Graphs that are used as examples </p> <br>

		<div class=img>
			<img src = "/images/Continuation.png">
		</div>
		<p class=tables> Figure 2: Start-up time using the graphs from 
			Figure 1 with each respective algorithm
		</p><br>

		<div class=img>
			<img src = "/images/Startup.png">
		</div>
		<p class=tables> Figure 3: Search time using the graphs from Figure 1
			with each respective algorithm
		</p><br>
     
        
	   </div>
	   </div>
	</body>
	<script src="https://cdn.jsdelivr.net/npm/darkmode-js@1.5.7/lib/darkmode-js.min.js"></script>

<script>

  function addDarkmodeWidget() {
    new Darkmode(options).showWidget();
  }
  window.addEventListener('load', addDarkmodeWidget);

  const options = {
    bottom: '64px', // default: '32px' 
    right: '32px', // default: '32px' 
    left: 'unset', // default: 'unset' 
    time: '0.5s', // default: '0.3s' 
    mixColor: '#fff', // default: '#fff' 
    backgroundColor: '#fff', // default: '#fff' 
    buttonColorDark: '#100f2c', // default: '#100f2c' 
    buttonColorLight: '#fff', // default: '#fff' 
    saveInCookies: false, // default: true, 
    label: '&#127763', // default: '' 
    autoMatchOsTheme: true // default: true
}
</script> 
</html>